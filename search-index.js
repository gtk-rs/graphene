var searchIndex = JSON.parse('{\
"graphene":{"doc":"","i":[[3,"Box","graphene","",null,null],[3,"Euler","","",null,null],[3,"Frustum","","",null,null],[3,"Matrix","","",null,null],[3,"Plane","","",null,null],[3,"Point","","",null,null],[3,"Point3D","","",null,null],[3,"Quad","","",null,null],[3,"Quaternion","","",null,null],[3,"Ray","","",null,null],[3,"Rect","","",null,null],[3,"Size","","",null,null],[3,"Sphere","","",null,null],[3,"Triangle","","",null,null],[3,"Vec2","","",null,null],[3,"Vec3","","",null,null],[3,"Vec4","","",null,null],[4,"EulerOrder","","Specify the order of the rotations on each axis.",null,null],[13,"Default","","Rotate in the default order; the default order is one of…",0,null],[13,"Xyz","","Rotate in the X, Y, and Z order",0,null],[13,"Yzx","","Rotate in the Y, Z, and X order",0,null],[13,"Zxy","","Rotate in the Z, X, and Y order",0,null],[13,"Xzy","","Rotate in the X, Z, and Y order",0,null],[13,"Yxz","","Rotate in the Y, X, and Z order",0,null],[13,"Zyx","","Rotate in the Z, Y, and X order",0,null],[11,"contains_box","","Checks whether the `Box` `self` contains the given `Box`…",1,[[["box",3]]]],[11,"contains_point","","Checks whether `self` contains the given `point`. ##…",1,[[["point3d",3]]]],[11,"expand","","Expands the dimensions of `self` to include the…",1,[[["point3d",3]],["box",3]]],[11,"expand_scalar","","Expands the dimensions of `self` by the given `scalar`…",1,[[],["box",3]]],[11,"expand_vec3","","Expands the dimensions of `self` to include the…",1,[[["vec3",3]],["box",3]]],[11,"get_bounding_sphere","","Computes the bounding `Sphere` capable of containing the…",1,[[],["sphere",3]]],[11,"get_center","","Retrieves the coordinates of the center of a `Box`. ##…",1,[[],["point3d",3]]],[11,"get_depth","","Retrieves the size of the `self` on the Z axis.",1,[[]]],[11,"get_height","","Retrieves the size of the `self` on the Y axis.",1,[[]]],[11,"get_max","","Retrieves the coordinates of the maximum point of the…",1,[[],["point3d",3]]],[11,"get_min","","Retrieves the coordinates of the minimum point of the…",1,[[],["point3d",3]]],[11,"get_size","","Retrieves the size of the box on all three axes, and…",1,[[],["vec3",3]]],[11,"get_width","","Retrieves the size of the `self` on the X axis.",1,[[]]],[11,"init","","Initializes the given `Box` with two vertices. ## `min`…",1,[[["point3d",3],["option",4]]]],[11,"init_from_box","","Initializes the given `Box` with the vertices of another…",1,[[["box",3]]]],[11,"init_from_vec3","","Initializes the given `Box` with two vertices stored…",1,[[["option",4],["vec3",3]]]],[11,"intersection","","Intersects the two given `Box`.",1,[[["box",3]],[["option",4],["box",3]]]],[11,"union","","Unions the two given `Box`. ## `b` the box to union to…",1,[[["box",3]],["box",3]]],[11,"empty","","A degenerate `Box` that can only be expanded.",1,[[],["box",3]]],[11,"infinite","","A degenerate `Box` that cannot be expanded.",1,[[],["box",3]]],[11,"minus_one","","A `Box` with the minimum vertex set at (-1, -1, -1) and…",1,[[],["box",3]]],[11,"one","","A `Box` with the minimum vertex set at (0, 0, 0) and the…",1,[[],["box",3]]],[11,"one_minus_one","","A `Box` with the minimum vertex set at (-1, -1, -1) and…",1,[[],["box",3]]],[11,"zero","","A `Box` with both the minimum and maximum vertices set at…",1,[[],["box",3]]],[11,"get_order","","Retrieves the order used to apply the rotations described…",2,[[],["eulerorder",4]]],[11,"get_x","","Retrieves the rotation angle on the X axis, in degrees.",2,[[]]],[11,"get_y","","Retrieves the rotation angle on the Y axis, in degrees.",2,[[]]],[11,"get_z","","Retrieves the rotation angle on the Z axis, in degrees.",2,[[]]],[11,"init","","Initializes a `Euler` using the given angles.",2,[[]]],[11,"init_from_euler","","Initializes a `Euler` using the angles and order of…",2,[[["option",4],["euler",3]]]],[11,"init_from_matrix","","Initializes a `Euler` using the given rotation matrix.",2,[[["eulerorder",4],["option",4],["matrix",3]]]],[11,"init_from_quaternion","","Initializes a `Euler` using the given normalized quaternion.",2,[[["option",4],["quaternion",3],["eulerorder",4]]]],[11,"init_from_vec3","","Initializes a `Euler` using the angles contained in a…",2,[[["eulerorder",4],["option",4],["vec3",3]]]],[11,"init_with_order","","Initializes a `Euler` with the given angles and `order`.…",2,[[["eulerorder",4]]]],[11,"reorder","","Reorders a `Euler` using `order`.",2,[[["eulerorder",4]],["euler",3]]],[11,"to_matrix","","Converts a `Euler` into a transformation matrix expressing…",2,[[],["matrix",3]]],[11,"to_vec3","","Retrieves the angles of a `Euler` and initializes a `Vec3`…",2,[[],["vec3",3]]],[11,"contains_point","","Checks whether a point is inside the volume defined by the…",3,[[["point3d",3]]]],[11,"init","","Initializes the given `Frustum` using the provided…",3,[[["plane",3]]]],[11,"init_from_frustum","","Initializes the given `Frustum` using the clipping planes…",3,[[["frustum",3]]]],[11,"init_from_matrix","","Initializes a `Frustum` using the given `matrix`. ##…",3,[[["matrix",3]]]],[11,"intersects_box","","Checks whether the given `box_` intersects a plane of a…",3,[[["box",3]]]],[11,"intersects_sphere","","Checks whether the given `sphere` intersects a plane of a…",3,[[["sphere",3]]]],[11,"determinant","","Computes the determinant of the given matrix.",4,[[]]],[11,"equal_fast","","Checks whether the two given `Matrix` matrices are…",4,[[["matrix",3]]]],[11,"get_row","","Retrieves the given row vector at `index_` inside a…",4,[[],["vec4",3]]],[11,"get_value","","Retrieves the value at the given `row` and `col` index. ##…",4,[[]]],[11,"get_x_scale","","Retrieves the scaling factor on the X axis in `self`.",4,[[]]],[11,"get_x_translation","","Retrieves the translation component on the X axis from…",4,[[]]],[11,"get_y_scale","","Retrieves the scaling factor on the Y axis in `self`.",4,[[]]],[11,"get_y_translation","","Retrieves the translation component on the Y axis from…",4,[[]]],[11,"get_z_scale","","Retrieves the scaling factor on the Z axis in `self`.",4,[[]]],[11,"get_z_translation","","Retrieves the translation component on the Z axis from…",4,[[]]],[11,"init_from_2d","","Initializes a `Matrix` from the values of an affine…",4,[[]]],[11,"init_from_matrix","","Initializes a `Matrix` using the values of the given…",4,[[["matrix",3]]]],[11,"init_from_vec4","","Initializes a `Matrix` with the given four row vectors. ##…",4,[[["vec4",3]]]],[11,"init_frustum","","Initializes a `Matrix` compatible with `Frustum`.",4,[[]]],[11,"init_identity","","Initializes a `Matrix` with the identity matrix.",4,[[]]],[11,"init_look_at","","Initializes a `Matrix` so that it positions the \\\"camera\\\"…",4,[[["vec3",3]]]],[11,"init_ortho","","Initializes a `Matrix` with an orthographic projection. ##…",4,[[]]],[11,"init_perspective","","Initializes a `Matrix` with a perspective projection. ##…",4,[[]]],[11,"init_rotate","","Initializes `self` to represent a rotation of `angle`…",4,[[["vec3",3]]]],[11,"init_scale","","Initializes a `Matrix` with the given scaling factors. ##…",4,[[]]],[11,"init_skew","","Initializes a `Matrix` with a skew transformation with the…",4,[[]]],[11,"init_translate","","Initializes a `Matrix` with a translation to the given…",4,[[["point3d",3]]]],[11,"interpolate","","Linearly interpolates the two given `Matrix` by…",4,[[["matrix",3]],["matrix",3]]],[11,"inverse","","Inverts the given matrix. ## `res` return location for the…",4,[[],[["option",4],["matrix",3]]]],[11,"is_2d","","Checks whether the given `Matrix` is compatible with an a…",4,[[]]],[11,"is_backface_visible","","Checks whether a `Matrix` has a visible back face.",4,[[]]],[11,"is_identity","","Checks whether the given `Matrix` is the identity matrix.",4,[[]]],[11,"is_singular","","Checks whether a matrix is singular.",4,[[]]],[11,"multiply","","Multiplies two `Matrix`.",4,[[["matrix",3]],["matrix",3]]],[11,"near","","Compares the two given `Matrix` matrices and check whether…",4,[[["matrix",3]]]],[11,"normalize","","Normalizes the given `Matrix`. ## `res` return location…",4,[[],["matrix",3]]],[11,"perspective","","Applies a perspective of `depth` to the matrix. ## `depth`…",4,[[],["matrix",3]]],[11,"print","","Prints the contents of a matrix.",4,[[]]],[11,"project_point","","Projects a `Point` using the matrix `self`. ## `p` a…",4,[[["point",3]],["point",3]]],[11,"project_rect","","Projects a `Rect` using the given matrix. ## `r` a `Rect`…",4,[[["rect",3]],["quad",3]]],[11,"project_rect_bounds","","Projects a `Rect` using the given matrix.",4,[[["rect",3]],["rect",3]]],[11,"rotate","","Adds a rotation transformation to `self`, using the given…",4,[[["vec3",3]]]],[11,"rotate_euler","","Adds a rotation transformation to `self`, using the given…",4,[[["euler",3]]]],[11,"rotate_quaternion","","Adds a rotation transformation to `self`, using the given…",4,[[["quaternion",3]]]],[11,"rotate_x","","Adds a rotation transformation around the X axis to…",4,[[]]],[11,"rotate_y","","Adds a rotation transformation around the Y axis to…",4,[[]]],[11,"rotate_z","","Adds a rotation transformation around the Z axis to…",4,[[]]],[11,"scale","","Adds a scaling transformation to `self`, using the three…",4,[[]]],[11,"skew_xy","","Adds a skew of `factor` on the X and Y axis to the given…",4,[[]]],[11,"skew_xz","","Adds a skew of `factor` on the X and Z axis to the given…",4,[[]]],[11,"skew_yz","","Adds a skew of `factor` on the Y and Z axis to the given…",4,[[]]],[11,"to_2d","","Converts a `Matrix` to an affine transformation matrix, if…",4,[[],["option",4]]],[11,"transform_bounds","","Transforms each corner of a `Rect` using the given matrix…",4,[[["rect",3]],["rect",3]]],[11,"transform_box","","Transforms the vertices of a `Box` using the given matrix…",4,[[["box",3]],["box",3]]],[11,"transform_point","","Transforms the given `Point` using the matrix `self`.",4,[[["point",3]],["point",3]]],[11,"transform_point3d","","Transforms the given `Point3D` using the matrix `self`.",4,[[["point3d",3]],["point3d",3]]],[11,"transform_ray","","Transform a `Ray` using the given matrix `self`. ## `r` a…",4,[[["ray",3]],["ray",3]]],[11,"transform_rect","","Transforms each corner of a `Rect` using the given matrix…",4,[[["rect",3]],["quad",3]]],[11,"transform_sphere","","Transforms a `Sphere` using the given matrix `self`. The…",4,[[["sphere",3]],["sphere",3]]],[11,"transform_vec3","","Transforms the given `Vec3` using the matrix `self`.",4,[[["vec3",3]],["vec3",3]]],[11,"transform_vec4","","Transforms the given `Vec4` using the matrix `self`.",4,[[["vec4",3]],["vec4",3]]],[11,"translate","","Adds a translation transformation to `self` using the…",4,[[["point3d",3]]]],[11,"transpose","","Transposes the given matrix. ## `res` return location for…",4,[[],["matrix",3]]],[11,"unproject_point3d","","Unprojects the given `point` using the `self` matrix and a…",4,[[["point3d",3],["matrix",3]],["point3d",3]]],[11,"untransform_bounds","","Undoes the transformation on the corners of a `Rect` using…",4,[[["rect",3]],["rect",3]]],[11,"untransform_point","","Undoes the transformation of a `Point` using the given…",4,[[["rect",3],["point",3]],[["option",4],["point",3]]]],[11,"distance","","Computes the distance of `point` from a `Plane`. ##…",5,[[["point3d",3]]]],[11,"get_constant","","Retrieves the distance along the normal vector of the…",5,[[]]],[11,"get_normal","","Retrieves the normal vector pointing towards the origin of…",5,[[],["vec3",3]]],[11,"init","","Initializes the given `Plane` using the given `normal`…",5,[[["option",4],["vec3",3]]]],[11,"init_from_plane","","Initializes the given `Plane` using the normal vector and…",5,[[["plane",3]]]],[11,"init_from_point","","Initializes the given `Plane` using the given normal…",5,[[["point3d",3],["vec3",3]]]],[11,"init_from_points","","Initializes the given `Plane` using the 3 provided…",5,[[["point3d",3]]]],[11,"init_from_vec4","","Initializes the given `Plane` using the components of the…",5,[[["vec4",3]]]],[11,"negate","","Negates the normal vector and constant of a `Plane`,…",5,[[],["plane",3]]],[11,"normalize","","Normalizes the vector of the given `Plane`, and adjusts…",5,[[],["plane",3]]],[11,"distance","","Computes the distance between `self` and `b`. ## `b` a…",6,[[["point",3]]]],[11,"init","","Initializes `self` to the given `x` and `y` coordinates.",6,[[]]],[11,"init_from_point","","Initializes `self` with the same coordinates of `src`. ##…",6,[[["point",3]]]],[11,"init_from_vec2","","Initializes `self` with the coordinates inside the given…",6,[[["vec2",3]]]],[11,"interpolate","","Linearly interpolates the coordinates of `self` and `b`…",6,[[["point",3]],["point",3]]],[11,"near","","Checks whether the two points `self` and `b` are within…",6,[[["point",3]]]],[11,"to_vec2","","Stores the coordinates of the given `Point` into a `Vec2`.…",6,[[],["vec2",3]]],[11,"zero","","Returns a point fixed at (0, 0).",6,[[],["point",3]]],[11,"cross","","Computes the cross product of the two given `Point3D`. ##…",7,[[["point3d",3]],["point3d",3]]],[11,"distance","","Computes the distance between the two given `Point3D`. ##…",7,[[["point3d",3]]]],[11,"dot","","Computes the dot product of the two given `Point3D`. ##…",7,[[["point3d",3]]]],[11,"init","","Initializes a `Point3D` with the given coordinates. ## `x`…",7,[[]]],[11,"init_from_point","","Initializes a `Point3D` using the coordinates of another…",7,[[["point3d",3]]]],[11,"init_from_vec3","","Initializes a `Point3D` using the components of a `Vec3`.…",7,[[["vec3",3]]]],[11,"interpolate","","Linearly interpolates each component of `self` and `b`…",7,[[["point3d",3]],["point3d",3]]],[11,"length","","Computes the length of the vector represented by the…",7,[[]]],[11,"near","","Checks whether the two points are near each other, within…",7,[[["point3d",3]]]],[11,"normalize","","Computes the normalization of the vector represented by…",7,[[],["point3d",3]]],[11,"normalize_viewport","","Normalizes the coordinates of a `Point3D` using the given…",7,[[["rect",3]],["point3d",3]]],[11,"scale","","Scales the coordinates of the given `Point3D` by the given…",7,[[],["point3d",3]]],[11,"to_vec3","","Stores the coordinates of a `Point3D` into a `Vec3`. ##…",7,[[],["vec3",3]]],[11,"zero","","Retrieves a constant point with all three coordinates set…",7,[[],["point3d",3]]],[11,"bounds","","Computes the bounding rectangle of `self` and places it…",8,[[],["rect",3]]],[11,"contains","","Checks if the given `Quad` contains the given `Point`. ##…",8,[[["point",3]]]],[11,"get_point","","Retrieves the point of a `Quad` at the given index. ##…",8,[[],[["option",4],["point",3]]]],[11,"init","","Initializes a `Quad` with the given points. ## `p1` the…",8,[[["point",3]]]],[11,"init_from_rect","","Initializes a `Quad` using the four corners of the given…",8,[[["rect",3]]]],[11,"dot","","Computes the dot product of two `Quaternion`. ## `b` a…",9,[[["quaternion",3]]]],[11,"init","","Initializes a `Quaternion` using the given four values. ##…",9,[[]]],[11,"init_from_angle_vec3","","Initializes a `Quaternion` using an `angle` on a specific…",9,[[["vec3",3]]]],[11,"init_from_angles","","Initializes a `Quaternion` using the values of the Euler…",9,[[]]],[11,"init_from_euler","","Initializes a `Quaternion` using the given `Euler`. ## `e`…",9,[[["euler",3]]]],[11,"init_from_matrix","","Initializes a `Quaternion` using the rotation components…",9,[[["matrix",3]]]],[11,"init_from_quaternion","","Initializes a `Quaternion` with the values from `src`. ##…",9,[[["quaternion",3]]]],[11,"init_from_radians","","Initializes a `Quaternion` using the values of the Euler…",9,[[]]],[11,"init_from_vec4","","Initializes a `Quaternion` with the values from `src`. ##…",9,[[["vec4",3]]]],[11,"init_identity","","Initializes a `Quaternion` using the identity…",9,[[]]],[11,"invert","","Inverts a `Quaternion`. ## `res` return location for the…",9,[[],["quaternion",3]]],[11,"normalize","","Normalizes a `Quaternion`. ## `res` return location for…",9,[[],["quaternion",3]]],[11,"slerp","","Interpolates between the two given quaternions using a…",9,[[["quaternion",3]],["quaternion",3]]],[11,"to_angle_vec3","","Converts a quaternion into an `angle`, `axis` pair. ##…",9,[[]]],[11,"to_angles","","Converts a `Quaternion` to its corresponding rotations on…",9,[[]]],[11,"to_matrix","","Converts a quaternion into a transformation matrix…",9,[[],["matrix",3]]],[11,"to_radians","","Converts a `Quaternion` to its corresponding rotations on…",9,[[]]],[11,"to_vec4","","Copies the components of a `Quaternion` into a `Vec4`. ##…",9,[[],["vec4",3]]],[11,"get_closest_point_to_point","","Computes the point on the given `Ray` that is closest to…",10,[[["point3d",3]],["point3d",3]]],[11,"get_direction","","Retrieves the direction of the given `Ray`. ## `direction`…",10,[[],["vec3",3]]],[11,"get_distance_to_plane","","Computes the distance of the origin of the given `Ray`…",10,[[["plane",3]]]],[11,"get_distance_to_point","","Computes the distance from the origin of the given ray to…",10,[[["point3d",3]]]],[11,"get_origin","","Retrieves the origin of the given `Ray`. ## `origin`…",10,[[],["point3d",3]]],[11,"get_position_at","","Retrieves the coordinates of a point at the distance `t`…",10,[[],["point3d",3]]],[11,"init","","Initializes the given `Ray` using the given `origin` and…",10,[[["option",4],["vec3",3],["option",4],["point3d",3]]]],[11,"init_from_ray","","Initializes the given `Ray` using the origin and direction…",10,[[["ray",3]]]],[11,"init_from_vec3","","Initializes the given `Ray` using the given vectors. ##…",10,[[["option",4],["vec3",3]]]],[11,"contains_point","","Checks whether a `Rect` contains the given coordinates. ##…",11,[[["point",3]]]],[11,"contains_rect","","Checks whether a `Rect` fully contains the given…",11,[[["rect",3]]]],[11,"expand","","Expands a `Rect` to contain the given `Point`. ## `p` a…",11,[[["point",3]],["rect",3]]],[11,"get_bottom_left","","Retrieves the coordinates of the bottom-left corner of the…",11,[[],["point",3]]],[11,"get_bottom_right","","Retrieves the coordinates of the bottom-right corner of…",11,[[],["point",3]]],[11,"get_center","","Retrieves the coordinates of the center of the given…",11,[[],["point",3]]],[11,"get_height","","Retrieves the normalized height of the given rectangle.",11,[[]]],[11,"get_top_left","","Retrieves the coordinates of the top-left corner of the…",11,[[],["point",3]]],[11,"get_top_right","","Retrieves the coordinates of the top-right corner of the…",11,[[],["point",3]]],[11,"get_width","","Retrieves the normalized width of the given rectangle.",11,[[]]],[11,"get_x","","Retrieves the normalized X coordinate of the origin of the…",11,[[]]],[11,"get_y","","Retrieves the normalized Y coordinate of the origin of the…",11,[[]]],[11,"init","","Initializes the given `Rect` with the given values.",11,[[]]],[11,"init_from_rect","","Initializes `self` using the given `src` rectangle.",11,[[["rect",3]]]],[11,"inset","","Changes the given rectangle to be smaller, or larger…",11,[[],[["option",4],["rect",3]]]],[11,"inset_r","","Changes the given rectangle to be smaller, or larger…",11,[[],["rect",3]]],[11,"interpolate","","Linearly interpolates the origin and size of the two given…",11,[[["rect",3]],["rect",3]]],[11,"intersection","","Computes the intersection of the two given rectangles.",11,[[["rect",3]],[["option",4],["rect",3]]]],[11,"normalize","","Normalizes the passed rectangle.",11,[[],[["option",4],["rect",3]]]],[11,"normalize_r","","Normalizes the passed rectangle.",11,[[],["rect",3]]],[11,"offset","","Offsets the origin by `d_x` and `d_y`.",11,[[],[["option",4],["rect",3]]]],[11,"offset_r","","Offsets the origin of the given rectangle by `d_x` and…",11,[[],["rect",3]]],[11,"round","","Rounds the origin and size of the given rectangle to their…",11,[[],["rect",3]]],[11,"scale","","Scales the size and origin of a rectangle horizontaly by…",11,[[],["rect",3]]],[11,"union","","Computes the union of the two given rectangles.",11,[[["rect",3]],["rect",3]]],[11,"zero","","Returns a degenerate rectangle with origin fixed at (0, 0)…",11,[[],["rect",3]]],[11,"init","","Initializes a `Size` using the given `width` and `height`.…",12,[[]]],[11,"init_from_size","","Initializes a `Size` using the width and height of the…",12,[[["size",3]]]],[11,"interpolate","","Linearly interpolates the two given `Size` using the given…",12,[[["size",3]],["size",3]]],[11,"scale","","Scales the components of a `Size` using the given…",12,[[],["size",3]]],[11,"zero","","A constant pointer to a zero `Size`, useful for equality…",12,[[],["size",3]]],[11,"contains_point","","Checks whether the given `point` is contained in the…",13,[[["point3d",3]]]],[11,"distance","","Computes the distance of the given `point` from the…",13,[[["point3d",3]]]],[11,"get_bounding_box","","Computes the bounding box capable of containing the given…",13,[[],["box",3]]],[11,"get_center","","Retrieves the coordinates of the center of a `Sphere`. ##…",13,[[],["point3d",3]]],[11,"get_radius","","Retrieves the radius of a `Sphere`.",13,[[]]],[11,"init","","Initializes the given `Sphere` with the given `center` and…",13,[[["point3d",3],["option",4]]]],[11,"is_empty","","Checks whether the sphere has a zero radius.",13,[[]]],[11,"translate","","Translates the center of the given `Sphere` using the…",13,[[["point3d",3]],["sphere",3]]],[11,"contains_point","","Checks whether the given triangle `self` contains the…",14,[[["point3d",3]]]],[11,"get_area","","Computes the area of the given `Triangle`.",14,[[]]],[11,"get_barycoords","","Computes the barycentric coordinates of the given point `p`.",14,[[["point3d",3],["option",4]],[["option",4],["vec2",3]]]],[11,"get_bounding_box","","Computes the bounding box of the given `Triangle`. ##…",14,[[],["box",3]]],[11,"get_midpoint","","Computes the coordinates of the midpoint of the given…",14,[[],["point3d",3]]],[11,"get_normal","","Computes the normal vector of the given `Triangle`. ##…",14,[[],["vec3",3]]],[11,"get_plane","","Computes the plane based on the vertices of the given…",14,[[],["plane",3]]],[11,"get_points","","Retrieves the three vertices of the given `Triangle` and…",14,[[]]],[11,"get_vertices","","Retrieves the three vertices of the given `Triangle`. ##…",14,[[]]],[11,"init_from_point3d","","Initializes a `Triangle` using the three given 3D points.…",14,[[["point3d",3],["option",4]]]],[11,"init_from_vec3","","Initializes a `Triangle` using the three given vectors. ##…",14,[[["option",4],["vec3",3]]]],[11,"add","","Adds each component of the two passed vectors and places…",15,[[["vec2",3]],["vec2",3]]],[11,"divide","","Divides each component of the first operand `self` by the…",15,[[["vec2",3]],["vec2",3]]],[11,"dot","","Computes the dot product of the two given vectors. ## `b`…",15,[[["vec2",3]]]],[11,"get_x","","Retrieves the X component of the `Vec2`.",15,[[]]],[11,"get_y","","Retrieves the Y component of the `Vec2`.",15,[[]]],[11,"init","","Initializes a `Vec2` using the given values.",15,[[]]],[11,"init_from_vec2","","Copies the contents of `src` into `self`. ## `src` a `Vec2`",15,[[["vec2",3]]]],[11,"length","","Computes the length of the given vector.",15,[[]]],[11,"max","","Compares the two given vectors and places the maximum…",15,[[["vec2",3]],["vec2",3]]],[11,"min","","Compares the two given vectors and places the minimum…",15,[[["vec2",3]],["vec2",3]]],[11,"multiply","","Multiplies each component of the two passed vectors and…",15,[[["vec2",3]],["vec2",3]]],[11,"near","","Compares the two given `Vec2` vectors and checks whether…",15,[[["vec2",3]]]],[11,"negate","","Negates the given `Vec2`. ## `res` return location for the…",15,[[],["vec2",3]]],[11,"normalize","","Computes the normalized vector for the given vector…",15,[[],["vec2",3]]],[11,"scale","","Multiplies all components of the given vector with the…",15,[[],["vec2",3]]],[11,"subtract","","Subtracts from each component of the first operand `self`…",15,[[["vec2",3]],["vec2",3]]],[11,"one","","Retrieves a constant vector with (1, 1) components.",15,[[],["vec2",3]]],[11,"x_axis","","Retrieves a constant vector with (1, 0) components.",15,[[],["vec2",3]]],[11,"y_axis","","Retrieves a constant vector with (0, 1) components.",15,[[],["vec2",3]]],[11,"zero","","Retrieves a constant vector with (0, 0) components.",15,[[],["vec2",3]]],[11,"add","","Adds each component of the two given vectors. ## `b` a…",16,[[["vec3",3]],["vec3",3]]],[11,"cross","","Computes the cross product of the two given vectors. ##…",16,[[["vec3",3]],["vec3",3]]],[11,"divide","","Divides each component of the first operand `self` by the…",16,[[["vec3",3]],["vec3",3]]],[11,"dot","","Computes the dot product of the two given vectors. ## `b`…",16,[[["vec3",3]]]],[11,"get_x","","Retrieves the first component of the given vector `self`.",16,[[]]],[11,"get_xy","","Creates a `Vec2` that contains the first and second…",16,[[],["vec2",3]]],[11,"get_xy0","","Creates a `Vec3` that contains the first two components of…",16,[[],["vec3",3]]],[11,"get_xyz0","","Converts a `Vec3` in a `Vec4` using 0.0 as the value for…",16,[[],["vec4",3]]],[11,"get_xyz1","","Converts a `Vec3` in a `Vec4` using 1.0 as the value for…",16,[[],["vec4",3]]],[11,"get_xyzw","","Converts a `Vec3` in a `Vec4` using `w` as the value of…",16,[[],["vec4",3]]],[11,"get_y","","Retrieves the second component of the given vector `self`.",16,[[]]],[11,"get_z","","Retrieves the third component of the given vector `self`.",16,[[]]],[11,"init","","Initializes a `Vec3` using the given values.",16,[[]]],[11,"init_from_vec3","","Initializes a `Vec3` with the values of another `Vec3`. ##…",16,[[["vec3",3]]]],[11,"length","","Retrieves the length of the given vector `self`.",16,[[]]],[11,"max","","Compares each component of the two given vectors and…",16,[[["vec3",3]],["vec3",3]]],[11,"min","","Compares each component of the two given vectors and…",16,[[["vec3",3]],["vec3",3]]],[11,"multiply","","Multiplies each component of the two given vectors. ## `b`…",16,[[["vec3",3]],["vec3",3]]],[11,"near","","Compares the two given `Vec3` vectors and checks whether…",16,[[["vec3",3]]]],[11,"negate","","Negates the given `Vec3`. ## `res` return location for the…",16,[[],["vec3",3]]],[11,"normalize","","Normalizes the given `Vec3`. ## `res` return location for…",16,[[],["vec3",3]]],[11,"scale","","Multiplies all components of the given vector with the…",16,[[],["vec3",3]]],[11,"subtract","","Subtracts from each component of the first operand `self`…",16,[[["vec3",3]],["vec3",3]]],[11,"one","","Provides a constant pointer to a vector with three…",16,[[],["vec3",3]]],[11,"x_axis","","Provides a constant pointer to a vector with three…",16,[[],["vec3",3]]],[11,"y_axis","","Provides a constant pointer to a vector with three…",16,[[],["vec3",3]]],[11,"z_axis","","Provides a constant pointer to a vector with three…",16,[[],["vec3",3]]],[11,"zero","","Provides a constant pointer to a vector with three…",16,[[],["vec3",3]]],[11,"add","","Adds each component of the two given vectors. ## `b` a…",17,[[["vec4",3]],["vec4",3]]],[11,"divide","","Divides each component of the first operand `self` by the…",17,[[["vec4",3]],["vec4",3]]],[11,"dot","","Computes the dot product of the two given vectors. ## `b`…",17,[[["vec4",3]]]],[11,"get_w","","Retrieves the value of the fourth component of the given…",17,[[]]],[11,"get_x","","Retrieves the value of the first component of the given…",17,[[]]],[11,"get_xy","","Creates a `Vec2` that contains the first two components of…",17,[[],["vec2",3]]],[11,"get_xyz","","Creates a `Vec3` that contains the first three components…",17,[[],["vec3",3]]],[11,"get_y","","Retrieves the value of the second component of the given…",17,[[]]],[11,"get_z","","Retrieves the value of the third component of the given…",17,[[]]],[11,"init","","Initializes a `Vec4` using the given values.",17,[[]]],[11,"init_from_vec2","","Initializes a `Vec4` using the components of a `Vec2` and…",17,[[["vec2",3]]]],[11,"init_from_vec3","","Initializes a `Vec4` using the components of a `Vec3` and…",17,[[["vec3",3]]]],[11,"init_from_vec4","","Initializes a `Vec4` using the components of another…",17,[[["vec4",3]]]],[11,"length","","Computes the length of the given `Vec4`.",17,[[]]],[11,"max","","Compares each component of the two given vectors and…",17,[[["vec4",3]],["vec4",3]]],[11,"min","","Compares each component of the two given vectors and…",17,[[["vec4",3]],["vec4",3]]],[11,"multiply","","Multiplies each component of the two given vectors. ## `b`…",17,[[["vec4",3]],["vec4",3]]],[11,"near","","Compares the two given `Vec4` vectors and checks whether…",17,[[["vec4",3]]]],[11,"negate","","Negates the given `Vec4`. ## `res` return location for the…",17,[[],["vec4",3]]],[11,"normalize","","Normalizes the given `Vec4`. ## `res` return location for…",17,[[],["vec4",3]]],[11,"scale","","Multiplies all components of the given vector with the…",17,[[],["vec4",3]]],[11,"subtract","","Subtracts from each component of the first operand `self`…",17,[[["vec4",3]],["vec4",3]]],[11,"one","","Retrieves a pointer to a `Vec4` with all its components…",17,[[],["vec4",3]]],[11,"w_axis","","Retrieves a pointer to a `Vec4` with its components set to…",17,[[],["vec4",3]]],[11,"x_axis","","Retrieves a pointer to a `Vec4` with its components set to…",17,[[],["vec4",3]]],[11,"y_axis","","Retrieves a pointer to a `Vec4` with its components set to…",17,[[],["vec4",3]]],[11,"z_axis","","Retrieves a pointer to a `Vec4` with its components set to…",17,[[],["vec4",3]]],[11,"zero","","Retrieves a pointer to a `Vec4` with all its components…",17,[[],["vec4",3]]],[0,"prelude","","Traits intended for blanket imports.",null,null],[11,"get_vertices","","Computes the vertices of the given `Box`. ## `vertices`…",1,[[]]],[11,"init_from_points","","Initializes the given `Box` with the given array of…",1,[[]]],[11,"init_from_vectors","","Initializes the given `Box` with the given array of…",1,[[]]],[11,"new","","",1,[[["point3d",3],["option",4]],["box",3]]],[11,"new_from_box","","",1,[[["box",3]],["box",3]]],[11,"new_from_points","","",1,[[],["box",3]]],[11,"new_from_vec3","","",1,[[["option",4],["vec3",3]],["box",3]]],[11,"new_from_vectors","","",1,[[],["box",3]]],[11,"new","","",2,[[],["euler",3]]],[11,"new_from_euler","","",2,[[["option",4],["euler",3]],["euler",3]]],[11,"new_from_matrix","","",2,[[["eulerorder",4],["option",4],["matrix",3]],["euler",3]]],[11,"new_from_quaternion","","",2,[[["option",4],["quaternion",3],["eulerorder",4]],["euler",3]]],[11,"new_from_vec3","","",2,[[["eulerorder",4],["option",4],["vec3",3]],["euler",3]]],[11,"new_with_order","","",2,[[["eulerorder",4]],["euler",3]]],[11,"get_planes","","Retrieves the planes that define the given `Frustum`. ##…",3,[[]]],[11,"new","","",3,[[["plane",3]],["frustum",3]]],[11,"new_from_frustum","","",3,[[["frustum",3]],["frustum",3]]],[11,"new_from_matrix","","",3,[[["matrix",3]],["frustum",3]]],[11,"init_from_float","","Initializes a `Matrix` with the given array of floating…",4,[[]]],[11,"new_from_2d","","",4,[[],["matrix",3]]],[11,"new_from_float","","",4,[[],["matrix",3]]],[11,"new_from_matrix","","",4,[[["matrix",3]],["matrix",3]]],[11,"new_from_vec4","","",4,[[["vec4",3]],["matrix",3]]],[11,"new_frustum","","",4,[[],["matrix",3]]],[11,"new_identity","","",4,[[],["matrix",3]]],[11,"new_look_at","","",4,[[["vec3",3]],["matrix",3]]],[11,"new_ortho","","",4,[[],["matrix",3]]],[11,"new_perspective","","",4,[[],["matrix",3]]],[11,"new_rotate","","",4,[[["vec3",3]],["matrix",3]]],[11,"new_scale","","",4,[[],["matrix",3]]],[11,"new_skew","","",4,[[],["matrix",3]]],[11,"new_translate","","",4,[[["point3d",3]],["matrix",3]]],[11,"to_float","","Converts a `Matrix` to an array of floating point values.…",4,[[]]],[11,"new","","",5,[[["option",4],["vec3",3]],["plane",3]]],[11,"new_from_plane","","",5,[[["plane",3]],["plane",3]]],[11,"new_from_point","","",5,[[["point3d",3],["vec3",3]],["plane",3]]],[11,"new_from_points","","",5,[[["point3d",3]],["plane",3]]],[11,"new_from_vec4","","",5,[[["vec4",3]],["plane",3]]],[11,"new","","",6,[[],["point",3]]],[11,"new_from_point","","",6,[[["point",3]],["point",3]]],[11,"new_from_vec2","","",6,[[["vec2",3]],["point",3]]],[11,"new","","",7,[[],["point3d",3]]],[11,"new_from_point","","",7,[[["point3d",3]],["point3d",3]]],[11,"new_from_vec3","","",7,[[["vec3",3]],["point3d",3]]],[11,"init_from_points","","Initializes a `Quad` using an array of points. ## `points`…",8,[[]]],[11,"new","","",8,[[["point",3]],["quad",3]]],[11,"new_from_rect","","",8,[[["rect",3]],["quad",3]]],[11,"new_from_points","","",8,[[],["quad",3]]],[11,"new","","",9,[[],["quaternion",3]]],[11,"new_from_angle_vec3","","",9,[[["vec3",3]],["quaternion",3]]],[11,"new_from_angles","","",9,[[],["quaternion",3]]],[11,"new_from_euler","","",9,[[["euler",3]],["quaternion",3]]],[11,"new_from_matrix","","",9,[[["matrix",3]],["quaternion",3]]],[11,"new_from_quaternion","","",9,[[["quaternion",3]],["quaternion",3]]],[11,"new_from_radians","","",9,[[],["quaternion",3]]],[11,"new_from_vec4","","",9,[[["vec4",3]],["quaternion",3]]],[11,"new_identity","","",9,[[],["quaternion",3]]],[11,"new","","",10,[[["option",4],["vec3",3],["option",4],["point3d",3]],["ray",3]]],[11,"new_from_ray","","",10,[[["ray",3]],["ray",3]]],[11,"new_from_vec3","","",10,[[["option",4],["vec3",3]],["ray",3]]],[11,"get_vertices","","Computes the four vertices of a `Rect`. ## `vertices`…",11,[[]]],[11,"new","","",11,[[],["rect",3]]],[11,"new_from_rect","","",11,[[["rect",3]],["rect",3]]],[11,"new","","",12,[[],["size",3]]],[11,"new_from_size","","",12,[[["size",3]],["size",3]]],[11,"init_from_points","","Initializes the given `Sphere` using the given array of 3D…",13,[[["point3d",3],["option",4]]]],[11,"init_from_vectors","","Initializes the given `Sphere` using the given array of 3D…",13,[[["point3d",3],["option",4]]]],[11,"new","","",13,[[["point3d",3],["option",4]],["sphere",3]]],[11,"new_from_points","","",13,[[["point3d",3],["option",4]],["sphere",3]]],[11,"new_from_vectors","","",13,[[["point3d",3],["option",4]],["sphere",3]]],[11,"new_from_point3d","","",14,[[["point3d",3],["option",4]],["triangle",3]]],[11,"new_from_vec3","","",14,[[["option",4],["vec3",3]],["triangle",3]]],[11,"init_from_float","","Initializes `self` with the contents of the given array.…",15,[[]]],[11,"new","","",15,[[],["vec2",3]]],[11,"new_from_vec2","","",15,[[["vec2",3]],["vec2",3]]],[11,"new_from_float","","",15,[[],["vec2",3]]],[11,"to_float","","Stores the components of `self` into an array. ## `dest`…",15,[[]]],[11,"init_from_float","","Initializes a `Vec3` with the values from an array. ##…",16,[[]]],[11,"new","","",16,[[],["vec3",3]]],[11,"new_from_vec3","","",16,[[["vec3",3]],["vec3",3]]],[11,"new_from_float","","",16,[[],["vec3",3]]],[11,"to_float","","Copies the components of a `Vec3` into the given array. ##…",16,[[]]],[11,"init_from_float","","Initializes a `Vec4` with the values inside the given…",17,[[]]],[11,"new","","",17,[[],["vec4",3]]],[11,"new_from_vec2","","",17,[[["vec2",3]],["vec4",3]]],[11,"new_from_vec3","","",17,[[["vec3",3]],["vec4",3]]],[11,"new_from_vec4","","",17,[[["vec4",3]],["vec4",3]]],[11,"new_from_float","","",17,[[],["vec4",3]]],[11,"to_float","","Stores the components of the given `Vec4` into an array of…",17,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"to_value","","",1,[[],["value",3]]],[11,"to_value_type","","",1,[[],["type",4]]],[11,"to_send_value","","",1,[[],["sendvalue",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"to_value","","",2,[[],["value",3]]],[11,"to_value_type","","",2,[[],["type",4]]],[11,"to_send_value","","",2,[[],["sendvalue",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"to_value","","",3,[[],["value",3]]],[11,"to_value_type","","",3,[[],["type",4]]],[11,"to_send_value","","",3,[[],["sendvalue",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"to_value","","",4,[[],["value",3]]],[11,"to_value_type","","",4,[[],["type",4]]],[11,"to_send_value","","",4,[[],["sendvalue",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"to_value","","",5,[[],["value",3]]],[11,"to_value_type","","",5,[[],["type",4]]],[11,"to_send_value","","",5,[[],["sendvalue",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"to_value","","",6,[[],["value",3]]],[11,"to_value_type","","",6,[[],["type",4]]],[11,"to_send_value","","",6,[[],["sendvalue",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"to_value","","",7,[[],["value",3]]],[11,"to_value_type","","",7,[[],["type",4]]],[11,"to_send_value","","",7,[[],["sendvalue",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"to_value","","",8,[[],["value",3]]],[11,"to_value_type","","",8,[[],["type",4]]],[11,"to_send_value","","",8,[[],["sendvalue",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"to_value","","",9,[[],["value",3]]],[11,"to_value_type","","",9,[[],["type",4]]],[11,"to_send_value","","",9,[[],["sendvalue",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"to_value","","",10,[[],["value",3]]],[11,"to_value_type","","",10,[[],["type",4]]],[11,"to_send_value","","",10,[[],["sendvalue",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"to_value","","",11,[[],["value",3]]],[11,"to_value_type","","",11,[[],["type",4]]],[11,"to_send_value","","",11,[[],["sendvalue",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"to_value","","",12,[[],["value",3]]],[11,"to_value_type","","",12,[[],["type",4]]],[11,"to_send_value","","",12,[[],["sendvalue",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"to_value","","",13,[[],["value",3]]],[11,"to_value_type","","",13,[[],["type",4]]],[11,"to_send_value","","",13,[[],["sendvalue",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"to_value","","",14,[[],["value",3]]],[11,"to_value_type","","",14,[[],["type",4]]],[11,"to_send_value","","",14,[[],["sendvalue",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"to_value","","",15,[[],["value",3]]],[11,"to_value_type","","",15,[[],["type",4]]],[11,"to_send_value","","",15,[[],["sendvalue",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"to_value","","",16,[[],["value",3]]],[11,"to_value_type","","",16,[[],["type",4]]],[11,"to_send_value","","",16,[[],["sendvalue",3]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"to_value","","",17,[[],["value",3]]],[11,"to_value_type","","",17,[[],["type",4]]],[11,"to_send_value","","",17,[[],["sendvalue",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"clone","","",1,[[],["box",3]]],[11,"clone","","",2,[[],["euler",3]]],[11,"clone","","",3,[[],["frustum",3]]],[11,"clone","","",4,[[],["matrix",3]]],[11,"clone","","",5,[[],["plane",3]]],[11,"clone","","",6,[[],["point",3]]],[11,"clone","","",7,[[],["point3d",3]]],[11,"clone","","",8,[[],["quad",3]]],[11,"clone","","",9,[[],["quaternion",3]]],[11,"clone","","",10,[[],["ray",3]]],[11,"clone","","",11,[[],["rect",3]]],[11,"clone","","",12,[[],["size",3]]],[11,"clone","","",13,[[],["sphere",3]]],[11,"clone","","",14,[[],["triangle",3]]],[11,"clone","","",15,[[],["vec2",3]]],[11,"clone","","",16,[[],["vec3",3]]],[11,"clone","","",17,[[],["vec4",3]]],[11,"clone","","",0,[[],["eulerorder",4]]],[11,"cmp","","",1,[[["box",3]],["ordering",4]]],[11,"cmp","","",2,[[["euler",3]],["ordering",4]]],[11,"cmp","","",3,[[["frustum",3]],["ordering",4]]],[11,"cmp","","",4,[[["matrix",3]],["ordering",4]]],[11,"cmp","","",5,[[["plane",3]],["ordering",4]]],[11,"cmp","","",6,[[["point",3]],["ordering",4]]],[11,"cmp","","",7,[[["point3d",3]],["ordering",4]]],[11,"cmp","","",8,[[["quad",3]],["ordering",4]]],[11,"cmp","","",9,[[["quaternion",3]],["ordering",4]]],[11,"cmp","","",10,[[["ray",3]],["ordering",4]]],[11,"cmp","","",11,[[["rect",3]],["ordering",4]]],[11,"cmp","","",12,[[["size",3]],["ordering",4]]],[11,"cmp","","",13,[[["sphere",3]],["ordering",4]]],[11,"cmp","","",14,[[["triangle",3]],["ordering",4]]],[11,"cmp","","",15,[[["vec2",3]],["ordering",4]]],[11,"cmp","","",16,[[["vec3",3]],["ordering",4]]],[11,"cmp","","",17,[[["vec4",3]],["ordering",4]]],[11,"cmp","","",0,[[["eulerorder",4]],["ordering",4]]],[11,"eq","","",1,[[]]],[11,"eq","","",2,[[]]],[11,"eq","","",3,[[]]],[11,"eq","","",4,[[]]],[11,"eq","","",5,[[]]],[11,"eq","","",6,[[]]],[11,"eq","","",7,[[]]],[11,"eq","","",8,[[["quad",3]]]],[11,"ne","","",8,[[["quad",3]]]],[11,"eq","","",9,[[]]],[11,"eq","","",10,[[]]],[11,"eq","","",11,[[]]],[11,"eq","","",12,[[]]],[11,"eq","","",13,[[]]],[11,"eq","","",14,[[]]],[11,"eq","","",15,[[]]],[11,"eq","","",16,[[]]],[11,"eq","","",17,[[]]],[11,"eq","","",0,[[["eulerorder",4]]]],[11,"ne","","",0,[[["eulerorder",4]]]],[11,"partial_cmp","","",1,[[["box",3]],[["option",4],["ordering",4]]]],[11,"lt","","",1,[[["box",3]]]],[11,"le","","",1,[[["box",3]]]],[11,"gt","","",1,[[["box",3]]]],[11,"ge","","",1,[[["box",3]]]],[11,"partial_cmp","","",2,[[["euler",3]],[["option",4],["ordering",4]]]],[11,"lt","","",2,[[["euler",3]]]],[11,"le","","",2,[[["euler",3]]]],[11,"gt","","",2,[[["euler",3]]]],[11,"ge","","",2,[[["euler",3]]]],[11,"partial_cmp","","",3,[[["frustum",3]],[["option",4],["ordering",4]]]],[11,"lt","","",3,[[["frustum",3]]]],[11,"le","","",3,[[["frustum",3]]]],[11,"gt","","",3,[[["frustum",3]]]],[11,"ge","","",3,[[["frustum",3]]]],[11,"partial_cmp","","",4,[[["matrix",3]],[["option",4],["ordering",4]]]],[11,"lt","","",4,[[["matrix",3]]]],[11,"le","","",4,[[["matrix",3]]]],[11,"gt","","",4,[[["matrix",3]]]],[11,"ge","","",4,[[["matrix",3]]]],[11,"partial_cmp","","",5,[[["plane",3]],[["option",4],["ordering",4]]]],[11,"lt","","",5,[[["plane",3]]]],[11,"le","","",5,[[["plane",3]]]],[11,"gt","","",5,[[["plane",3]]]],[11,"ge","","",5,[[["plane",3]]]],[11,"partial_cmp","","",6,[[["point",3]],[["option",4],["ordering",4]]]],[11,"lt","","",6,[[["point",3]]]],[11,"le","","",6,[[["point",3]]]],[11,"gt","","",6,[[["point",3]]]],[11,"ge","","",6,[[["point",3]]]],[11,"partial_cmp","","",7,[[["point3d",3]],[["option",4],["ordering",4]]]],[11,"lt","","",7,[[["point3d",3]]]],[11,"le","","",7,[[["point3d",3]]]],[11,"gt","","",7,[[["point3d",3]]]],[11,"ge","","",7,[[["point3d",3]]]],[11,"partial_cmp","","",8,[[["quad",3]],[["option",4],["ordering",4]]]],[11,"lt","","",8,[[["quad",3]]]],[11,"le","","",8,[[["quad",3]]]],[11,"gt","","",8,[[["quad",3]]]],[11,"ge","","",8,[[["quad",3]]]],[11,"partial_cmp","","",9,[[["quaternion",3]],[["option",4],["ordering",4]]]],[11,"lt","","",9,[[["quaternion",3]]]],[11,"le","","",9,[[["quaternion",3]]]],[11,"gt","","",9,[[["quaternion",3]]]],[11,"ge","","",9,[[["quaternion",3]]]],[11,"partial_cmp","","",10,[[["ray",3]],[["option",4],["ordering",4]]]],[11,"lt","","",10,[[["ray",3]]]],[11,"le","","",10,[[["ray",3]]]],[11,"gt","","",10,[[["ray",3]]]],[11,"ge","","",10,[[["ray",3]]]],[11,"partial_cmp","","",11,[[["rect",3]],[["option",4],["ordering",4]]]],[11,"lt","","",11,[[["rect",3]]]],[11,"le","","",11,[[["rect",3]]]],[11,"gt","","",11,[[["rect",3]]]],[11,"ge","","",11,[[["rect",3]]]],[11,"partial_cmp","","",12,[[["size",3]],[["option",4],["ordering",4]]]],[11,"lt","","",12,[[["size",3]]]],[11,"le","","",12,[[["size",3]]]],[11,"gt","","",12,[[["size",3]]]],[11,"ge","","",12,[[["size",3]]]],[11,"partial_cmp","","",13,[[["sphere",3]],[["option",4],["ordering",4]]]],[11,"lt","","",13,[[["sphere",3]]]],[11,"le","","",13,[[["sphere",3]]]],[11,"gt","","",13,[[["sphere",3]]]],[11,"ge","","",13,[[["sphere",3]]]],[11,"partial_cmp","","",14,[[["triangle",3]],[["option",4],["ordering",4]]]],[11,"lt","","",14,[[["triangle",3]]]],[11,"le","","",14,[[["triangle",3]]]],[11,"gt","","",14,[[["triangle",3]]]],[11,"ge","","",14,[[["triangle",3]]]],[11,"partial_cmp","","",15,[[["vec2",3]],[["option",4],["ordering",4]]]],[11,"lt","","",15,[[["vec2",3]]]],[11,"le","","",15,[[["vec2",3]]]],[11,"gt","","",15,[[["vec2",3]]]],[11,"ge","","",15,[[["vec2",3]]]],[11,"partial_cmp","","",16,[[["vec3",3]],[["option",4],["ordering",4]]]],[11,"lt","","",16,[[["vec3",3]]]],[11,"le","","",16,[[["vec3",3]]]],[11,"gt","","",16,[[["vec3",3]]]],[11,"ge","","",16,[[["vec3",3]]]],[11,"partial_cmp","","",17,[[["vec4",3]],[["option",4],["ordering",4]]]],[11,"lt","","",17,[[["vec4",3]]]],[11,"le","","",17,[[["vec4",3]]]],[11,"gt","","",17,[[["vec4",3]]]],[11,"ge","","",17,[[["vec4",3]]]],[11,"partial_cmp","","",0,[[["eulerorder",4]],[["option",4],["ordering",4]]]],[11,"lt","","",0,[[["eulerorder",4]]]],[11,"le","","",0,[[["eulerorder",4]]]],[11,"gt","","",0,[[["eulerorder",4]]]],[11,"ge","","",0,[[["eulerorder",4]]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"hash","","",1,[[]]],[11,"hash","","",2,[[]]],[11,"hash","","",3,[[]]],[11,"hash","","",4,[[]]],[11,"hash","","",5,[[]]],[11,"hash","","",6,[[]]],[11,"hash","","",7,[[]]],[11,"hash","","",8,[[]]],[11,"hash","","",9,[[]]],[11,"hash","","",10,[[]]],[11,"hash","","",11,[[]]],[11,"hash","","",12,[[]]],[11,"hash","","",13,[[]]],[11,"hash","","",14,[[]]],[11,"hash","","",15,[[]]],[11,"hash","","",16,[[]]],[11,"hash","","",17,[[]]],[11,"hash","","",0,[[]]],[11,"static_type","","",1,[[],["type",4]]],[11,"static_type","","",2,[[],["type",4]]],[11,"static_type","","",3,[[],["type",4]]],[11,"static_type","","",4,[[],["type",4]]],[11,"static_type","","",5,[[],["type",4]]],[11,"static_type","","",6,[[],["type",4]]],[11,"static_type","","",7,[[],["type",4]]],[11,"static_type","","",8,[[],["type",4]]],[11,"static_type","","",9,[[],["type",4]]],[11,"static_type","","",10,[[],["type",4]]],[11,"static_type","","",11,[[],["type",4]]],[11,"static_type","","",12,[[],["type",4]]],[11,"static_type","","",13,[[],["type",4]]],[11,"static_type","","",14,[[],["type",4]]],[11,"static_type","","",15,[[],["type",4]]],[11,"static_type","","",16,[[],["type",4]]],[11,"static_type","","",17,[[],["type",4]]]],"p":[[4,"EulerOrder"],[3,"Box"],[3,"Euler"],[3,"Frustum"],[3,"Matrix"],[3,"Plane"],[3,"Point"],[3,"Point3D"],[3,"Quad"],[3,"Quaternion"],[3,"Ray"],[3,"Rect"],[3,"Size"],[3,"Sphere"],[3,"Triangle"],[3,"Vec2"],[3,"Vec3"],[3,"Vec4"]]},\
"graphene_sys":{"doc":"","i":[[3,"graphene_box_t","graphene_sys","",null,null],[12,"min","","",0,null],[12,"max","","",0,null],[3,"graphene_euler_t","","",null,null],[12,"angles","","",1,null],[12,"order","","",1,null],[3,"graphene_frustum_t","","",null,null],[12,"planes","","",2,null],[3,"graphene_matrix_t","","",null,null],[12,"value","","",3,null],[3,"graphene_plane_t","","",null,null],[12,"normal","","",4,null],[12,"constant","","",4,null],[3,"graphene_point3d_t","","",null,null],[12,"x","","",5,null],[12,"y","","",5,null],[12,"z","","",5,null],[3,"graphene_point_t","","",null,null],[12,"x","","",6,null],[12,"y","","",6,null],[3,"graphene_quad_t","","",null,null],[12,"points","","",7,null],[3,"graphene_quaternion_t","","",null,null],[12,"x","","",8,null],[12,"y","","",8,null],[12,"z","","",8,null],[12,"w","","",8,null],[3,"graphene_ray_t","","",null,null],[12,"origin","","",9,null],[12,"direction","","",9,null],[3,"graphene_rect_t","","",null,null],[12,"origin","","",10,null],[12,"size","","",10,null],[3,"graphene_simd4f_t","","",null,null],[12,"x","","",11,null],[12,"y","","",11,null],[12,"z","","",11,null],[12,"w","","",11,null],[3,"graphene_simd4x4f_t","","",null,null],[12,"x","","",12,null],[12,"y","","",12,null],[12,"z","","",12,null],[12,"w","","",12,null],[3,"graphene_size_t","","",null,null],[12,"width","","",13,null],[12,"height","","",13,null],[3,"graphene_sphere_t","","",null,null],[12,"center","","",14,null],[12,"radius","","",14,null],[3,"graphene_triangle_t","","",null,null],[12,"a","","",15,null],[12,"b","","",15,null],[12,"c","","",15,null],[3,"graphene_vec2_t","","",null,null],[12,"value","","",16,null],[3,"graphene_vec3_t","","",null,null],[12,"value","","",17,null],[3,"graphene_vec4_t","","",null,null],[12,"value","","",18,null],[5,"graphene_box_get_type","","",null,null],[5,"graphene_box_alloc","","",null,null],[5,"graphene_box_contains_box","","",null,null],[5,"graphene_box_contains_point","","",null,null],[5,"graphene_box_equal","","",null,null],[5,"graphene_box_expand","","",null,null],[5,"graphene_box_expand_scalar","","",null,null],[5,"graphene_box_expand_vec3","","",null,null],[5,"graphene_box_free","","",null,null],[5,"graphene_box_get_bounding_sphere","","",null,null],[5,"graphene_box_get_center","","",null,null],[5,"graphene_box_get_depth","","",null,null],[5,"graphene_box_get_height","","",null,null],[5,"graphene_box_get_max","","",null,null],[5,"graphene_box_get_min","","",null,null],[5,"graphene_box_get_size","","",null,null],[5,"graphene_box_get_vertices","","",null,null],[5,"graphene_box_get_width","","",null,null],[5,"graphene_box_init","","",null,null],[5,"graphene_box_init_from_box","","",null,null],[5,"graphene_box_init_from_points","","",null,null],[5,"graphene_box_init_from_vec3","","",null,null],[5,"graphene_box_init_from_vectors","","",null,null],[5,"graphene_box_intersection","","",null,null],[5,"graphene_box_union","","",null,null],[5,"graphene_box_empty","","",null,null],[5,"graphene_box_infinite","","",null,null],[5,"graphene_box_minus_one","","",null,null],[5,"graphene_box_one","","",null,null],[5,"graphene_box_one_minus_one","","",null,null],[5,"graphene_box_zero","","",null,null],[5,"graphene_euler_get_type","","",null,null],[5,"graphene_euler_alloc","","",null,null],[5,"graphene_euler_equal","","",null,null],[5,"graphene_euler_free","","",null,null],[5,"graphene_euler_get_order","","",null,null],[5,"graphene_euler_get_x","","",null,null],[5,"graphene_euler_get_y","","",null,null],[5,"graphene_euler_get_z","","",null,null],[5,"graphene_euler_init","","",null,null],[5,"graphene_euler_init_from_euler","","",null,null],[5,"graphene_euler_init_from_matrix","","",null,null],[5,"graphene_euler_init_from_quaternion","","",null,null],[5,"graphene_euler_init_from_vec3","","",null,null],[5,"graphene_euler_init_with_order","","",null,null],[5,"graphene_euler_reorder","","",null,null],[5,"graphene_euler_to_matrix","","",null,null],[5,"graphene_euler_to_vec3","","",null,null],[5,"graphene_frustum_get_type","","",null,null],[5,"graphene_frustum_alloc","","",null,null],[5,"graphene_frustum_contains_point","","",null,null],[5,"graphene_frustum_equal","","",null,null],[5,"graphene_frustum_free","","",null,null],[5,"graphene_frustum_get_planes","","",null,null],[5,"graphene_frustum_init","","",null,null],[5,"graphene_frustum_init_from_frustum","","",null,null],[5,"graphene_frustum_init_from_matrix","","",null,null],[5,"graphene_frustum_intersects_box","","",null,null],[5,"graphene_frustum_intersects_sphere","","",null,null],[5,"graphene_matrix_get_type","","",null,null],[5,"graphene_matrix_alloc","","",null,null],[5,"graphene_matrix_determinant","","",null,null],[5,"graphene_matrix_equal","","",null,null],[5,"graphene_matrix_equal_fast","","",null,null],[5,"graphene_matrix_free","","",null,null],[5,"graphene_matrix_get_row","","",null,null],[5,"graphene_matrix_get_value","","",null,null],[5,"graphene_matrix_get_x_scale","","",null,null],[5,"graphene_matrix_get_x_translation","","",null,null],[5,"graphene_matrix_get_y_scale","","",null,null],[5,"graphene_matrix_get_y_translation","","",null,null],[5,"graphene_matrix_get_z_scale","","",null,null],[5,"graphene_matrix_get_z_translation","","",null,null],[5,"graphene_matrix_init_from_2d","","",null,null],[5,"graphene_matrix_init_from_float","","",null,null],[5,"graphene_matrix_init_from_matrix","","",null,null],[5,"graphene_matrix_init_from_vec4","","",null,null],[5,"graphene_matrix_init_frustum","","",null,null],[5,"graphene_matrix_init_identity","","",null,null],[5,"graphene_matrix_init_look_at","","",null,null],[5,"graphene_matrix_init_ortho","","",null,null],[5,"graphene_matrix_init_perspective","","",null,null],[5,"graphene_matrix_init_rotate","","",null,null],[5,"graphene_matrix_init_scale","","",null,null],[5,"graphene_matrix_init_skew","","",null,null],[5,"graphene_matrix_init_translate","","",null,null],[5,"graphene_matrix_interpolate","","",null,null],[5,"graphene_matrix_inverse","","",null,null],[5,"graphene_matrix_is_2d","","",null,null],[5,"graphene_matrix_is_backface_visible","","",null,null],[5,"graphene_matrix_is_identity","","",null,null],[5,"graphene_matrix_is_singular","","",null,null],[5,"graphene_matrix_multiply","","",null,null],[5,"graphene_matrix_near","","",null,null],[5,"graphene_matrix_normalize","","",null,null],[5,"graphene_matrix_perspective","","",null,null],[5,"graphene_matrix_print","","",null,null],[5,"graphene_matrix_project_point","","",null,null],[5,"graphene_matrix_project_rect","","",null,null],[5,"graphene_matrix_project_rect_bounds","","",null,null],[5,"graphene_matrix_rotate","","",null,null],[5,"graphene_matrix_rotate_euler","","",null,null],[5,"graphene_matrix_rotate_quaternion","","",null,null],[5,"graphene_matrix_rotate_x","","",null,null],[5,"graphene_matrix_rotate_y","","",null,null],[5,"graphene_matrix_rotate_z","","",null,null],[5,"graphene_matrix_scale","","",null,null],[5,"graphene_matrix_skew_xy","","",null,null],[5,"graphene_matrix_skew_xz","","",null,null],[5,"graphene_matrix_skew_yz","","",null,null],[5,"graphene_matrix_to_2d","","",null,null],[5,"graphene_matrix_to_float","","",null,null],[5,"graphene_matrix_transform_bounds","","",null,null],[5,"graphene_matrix_transform_box","","",null,null],[5,"graphene_matrix_transform_point","","",null,null],[5,"graphene_matrix_transform_point3d","","",null,null],[5,"graphene_matrix_transform_ray","","",null,null],[5,"graphene_matrix_transform_rect","","",null,null],[5,"graphene_matrix_transform_sphere","","",null,null],[5,"graphene_matrix_transform_vec3","","",null,null],[5,"graphene_matrix_transform_vec4","","",null,null],[5,"graphene_matrix_translate","","",null,null],[5,"graphene_matrix_transpose","","",null,null],[5,"graphene_matrix_unproject_point3d","","",null,null],[5,"graphene_matrix_untransform_bounds","","",null,null],[5,"graphene_matrix_untransform_point","","",null,null],[5,"graphene_plane_get_type","","",null,null],[5,"graphene_plane_alloc","","",null,null],[5,"graphene_plane_distance","","",null,null],[5,"graphene_plane_equal","","",null,null],[5,"graphene_plane_free","","",null,null],[5,"graphene_plane_get_constant","","",null,null],[5,"graphene_plane_get_normal","","",null,null],[5,"graphene_plane_init","","",null,null],[5,"graphene_plane_init_from_plane","","",null,null],[5,"graphene_plane_init_from_point","","",null,null],[5,"graphene_plane_init_from_points","","",null,null],[5,"graphene_plane_init_from_vec4","","",null,null],[5,"graphene_plane_negate","","",null,null],[5,"graphene_plane_normalize","","",null,null],[5,"graphene_point3d_get_type","","",null,null],[5,"graphene_point3d_alloc","","",null,null],[5,"graphene_point3d_cross","","",null,null],[5,"graphene_point3d_distance","","",null,null],[5,"graphene_point3d_dot","","",null,null],[5,"graphene_point3d_equal","","",null,null],[5,"graphene_point3d_free","","",null,null],[5,"graphene_point3d_init","","",null,null],[5,"graphene_point3d_init_from_point","","",null,null],[5,"graphene_point3d_init_from_vec3","","",null,null],[5,"graphene_point3d_interpolate","","",null,null],[5,"graphene_point3d_length","","",null,null],[5,"graphene_point3d_near","","",null,null],[5,"graphene_point3d_normalize","","",null,null],[5,"graphene_point3d_normalize_viewport","","",null,null],[5,"graphene_point3d_scale","","",null,null],[5,"graphene_point3d_to_vec3","","",null,null],[5,"graphene_point3d_zero","","",null,null],[5,"graphene_point_get_type","","",null,null],[5,"graphene_point_alloc","","",null,null],[5,"graphene_point_distance","","",null,null],[5,"graphene_point_equal","","",null,null],[5,"graphene_point_free","","",null,null],[5,"graphene_point_init","","",null,null],[5,"graphene_point_init_from_point","","",null,null],[5,"graphene_point_init_from_vec2","","",null,null],[5,"graphene_point_interpolate","","",null,null],[5,"graphene_point_near","","",null,null],[5,"graphene_point_to_vec2","","",null,null],[5,"graphene_point_zero","","",null,null],[5,"graphene_quad_get_type","","",null,null],[5,"graphene_quad_alloc","","",null,null],[5,"graphene_quad_bounds","","",null,null],[5,"graphene_quad_contains","","",null,null],[5,"graphene_quad_free","","",null,null],[5,"graphene_quad_get_point","","",null,null],[5,"graphene_quad_init","","",null,null],[5,"graphene_quad_init_from_points","","",null,null],[5,"graphene_quad_init_from_rect","","",null,null],[5,"graphene_quaternion_get_type","","",null,null],[5,"graphene_quaternion_alloc","","",null,null],[5,"graphene_quaternion_dot","","",null,null],[5,"graphene_quaternion_equal","","",null,null],[5,"graphene_quaternion_free","","",null,null],[5,"graphene_quaternion_init","","",null,null],[5,"graphene_quaternion_init_from_angle_vec3","","",null,null],[5,"graphene_quaternion_init_from_angles","","",null,null],[5,"graphene_quaternion_init_from_euler","","",null,null],[5,"graphene_quaternion_init_from_matrix","","",null,null],[5,"graphene_quaternion_init_from_quaternion","","",null,null],[5,"graphene_quaternion_init_from_radians","","",null,null],[5,"graphene_quaternion_init_from_vec4","","",null,null],[5,"graphene_quaternion_init_identity","","",null,null],[5,"graphene_quaternion_invert","","",null,null],[5,"graphene_quaternion_normalize","","",null,null],[5,"graphene_quaternion_slerp","","",null,null],[5,"graphene_quaternion_to_angle_vec3","","",null,null],[5,"graphene_quaternion_to_angles","","",null,null],[5,"graphene_quaternion_to_matrix","","",null,null],[5,"graphene_quaternion_to_radians","","",null,null],[5,"graphene_quaternion_to_vec4","","",null,null],[5,"graphene_ray_get_type","","",null,null],[5,"graphene_ray_alloc","","",null,null],[5,"graphene_ray_equal","","",null,null],[5,"graphene_ray_free","","",null,null],[5,"graphene_ray_get_closest_point_to_point","","",null,null],[5,"graphene_ray_get_direction","","",null,null],[5,"graphene_ray_get_distance_to_plane","","",null,null],[5,"graphene_ray_get_distance_to_point","","",null,null],[5,"graphene_ray_get_origin","","",null,null],[5,"graphene_ray_get_position_at","","",null,null],[5,"graphene_ray_init","","",null,null],[5,"graphene_ray_init_from_ray","","",null,null],[5,"graphene_ray_init_from_vec3","","",null,null],[5,"graphene_rect_get_type","","",null,null],[5,"graphene_rect_contains_point","","",null,null],[5,"graphene_rect_contains_rect","","",null,null],[5,"graphene_rect_equal","","",null,null],[5,"graphene_rect_expand","","",null,null],[5,"graphene_rect_free","","",null,null],[5,"graphene_rect_get_bottom_left","","",null,null],[5,"graphene_rect_get_bottom_right","","",null,null],[5,"graphene_rect_get_center","","",null,null],[5,"graphene_rect_get_height","","",null,null],[5,"graphene_rect_get_top_left","","",null,null],[5,"graphene_rect_get_top_right","","",null,null],[5,"graphene_rect_get_vertices","","",null,null],[5,"graphene_rect_get_width","","",null,null],[5,"graphene_rect_get_x","","",null,null],[5,"graphene_rect_get_y","","",null,null],[5,"graphene_rect_init","","",null,null],[5,"graphene_rect_init_from_rect","","",null,null],[5,"graphene_rect_inset","","",null,null],[5,"graphene_rect_inset_r","","",null,null],[5,"graphene_rect_interpolate","","",null,null],[5,"graphene_rect_intersection","","",null,null],[5,"graphene_rect_normalize","","",null,null],[5,"graphene_rect_normalize_r","","",null,null],[5,"graphene_rect_offset","","",null,null],[5,"graphene_rect_offset_r","","",null,null],[5,"graphene_rect_round","","",null,null],[5,"graphene_rect_round_to_pixel","","",null,null],[5,"graphene_rect_scale","","",null,null],[5,"graphene_rect_union","","",null,null],[5,"graphene_rect_alloc","","",null,null],[5,"graphene_rect_zero","","",null,null],[5,"graphene_size_get_type","","",null,null],[5,"graphene_size_alloc","","",null,null],[5,"graphene_size_equal","","",null,null],[5,"graphene_size_free","","",null,null],[5,"graphene_size_init","","",null,null],[5,"graphene_size_init_from_size","","",null,null],[5,"graphene_size_interpolate","","",null,null],[5,"graphene_size_scale","","",null,null],[5,"graphene_size_zero","","",null,null],[5,"graphene_sphere_get_type","","",null,null],[5,"graphene_sphere_alloc","","",null,null],[5,"graphene_sphere_contains_point","","",null,null],[5,"graphene_sphere_distance","","",null,null],[5,"graphene_sphere_equal","","",null,null],[5,"graphene_sphere_free","","",null,null],[5,"graphene_sphere_get_bounding_box","","",null,null],[5,"graphene_sphere_get_center","","",null,null],[5,"graphene_sphere_get_radius","","",null,null],[5,"graphene_sphere_init","","",null,null],[5,"graphene_sphere_init_from_points","","",null,null],[5,"graphene_sphere_init_from_vectors","","",null,null],[5,"graphene_sphere_is_empty","","",null,null],[5,"graphene_sphere_translate","","",null,null],[5,"graphene_triangle_get_type","","",null,null],[5,"graphene_triangle_alloc","","",null,null],[5,"graphene_triangle_contains_point","","",null,null],[5,"graphene_triangle_equal","","",null,null],[5,"graphene_triangle_free","","",null,null],[5,"graphene_triangle_get_area","","",null,null],[5,"graphene_triangle_get_barycoords","","",null,null],[5,"graphene_triangle_get_bounding_box","","",null,null],[5,"graphene_triangle_get_midpoint","","",null,null],[5,"graphene_triangle_get_normal","","",null,null],[5,"graphene_triangle_get_plane","","",null,null],[5,"graphene_triangle_get_points","","",null,null],[5,"graphene_triangle_get_vertices","","",null,null],[5,"graphene_triangle_init_from_point3d","","",null,null],[5,"graphene_triangle_init_from_vec3","","",null,null],[5,"graphene_vec2_get_type","","",null,null],[5,"graphene_vec2_alloc","","",null,null],[5,"graphene_vec2_add","","",null,null],[5,"graphene_vec2_divide","","",null,null],[5,"graphene_vec2_dot","","",null,null],[5,"graphene_vec2_equal","","",null,null],[5,"graphene_vec2_free","","",null,null],[5,"graphene_vec2_get_x","","",null,null],[5,"graphene_vec2_get_y","","",null,null],[5,"graphene_vec2_init","","",null,null],[5,"graphene_vec2_init_from_float","","",null,null],[5,"graphene_vec2_init_from_vec2","","",null,null],[5,"graphene_vec2_length","","",null,null],[5,"graphene_vec2_max","","",null,null],[5,"graphene_vec2_min","","",null,null],[5,"graphene_vec2_multiply","","",null,null],[5,"graphene_vec2_near","","",null,null],[5,"graphene_vec2_negate","","",null,null],[5,"graphene_vec2_normalize","","",null,null],[5,"graphene_vec2_scale","","",null,null],[5,"graphene_vec2_subtract","","",null,null],[5,"graphene_vec2_to_float","","",null,null],[5,"graphene_vec2_one","","",null,null],[5,"graphene_vec2_x_axis","","",null,null],[5,"graphene_vec2_y_axis","","",null,null],[5,"graphene_vec2_zero","","",null,null],[5,"graphene_vec3_get_type","","",null,null],[5,"graphene_vec3_alloc","","",null,null],[5,"graphene_vec3_add","","",null,null],[5,"graphene_vec3_cross","","",null,null],[5,"graphene_vec3_divide","","",null,null],[5,"graphene_vec3_dot","","",null,null],[5,"graphene_vec3_equal","","",null,null],[5,"graphene_vec3_free","","",null,null],[5,"graphene_vec3_get_x","","",null,null],[5,"graphene_vec3_get_xy","","",null,null],[5,"graphene_vec3_get_xy0","","",null,null],[5,"graphene_vec3_get_xyz0","","",null,null],[5,"graphene_vec3_get_xyz1","","",null,null],[5,"graphene_vec3_get_xyzw","","",null,null],[5,"graphene_vec3_get_y","","",null,null],[5,"graphene_vec3_get_z","","",null,null],[5,"graphene_vec3_init","","",null,null],[5,"graphene_vec3_init_from_float","","",null,null],[5,"graphene_vec3_init_from_vec3","","",null,null],[5,"graphene_vec3_length","","",null,null],[5,"graphene_vec3_max","","",null,null],[5,"graphene_vec3_min","","",null,null],[5,"graphene_vec3_multiply","","",null,null],[5,"graphene_vec3_near","","",null,null],[5,"graphene_vec3_negate","","",null,null],[5,"graphene_vec3_normalize","","",null,null],[5,"graphene_vec3_scale","","",null,null],[5,"graphene_vec3_subtract","","",null,null],[5,"graphene_vec3_to_float","","",null,null],[5,"graphene_vec3_one","","",null,null],[5,"graphene_vec3_x_axis","","",null,null],[5,"graphene_vec3_y_axis","","",null,null],[5,"graphene_vec3_z_axis","","",null,null],[5,"graphene_vec3_zero","","",null,null],[5,"graphene_vec4_get_type","","",null,null],[5,"graphene_vec4_alloc","","",null,null],[5,"graphene_vec4_add","","",null,null],[5,"graphene_vec4_divide","","",null,null],[5,"graphene_vec4_dot","","",null,null],[5,"graphene_vec4_equal","","",null,null],[5,"graphene_vec4_free","","",null,null],[5,"graphene_vec4_get_w","","",null,null],[5,"graphene_vec4_get_x","","",null,null],[5,"graphene_vec4_get_xy","","",null,null],[5,"graphene_vec4_get_xyz","","",null,null],[5,"graphene_vec4_get_y","","",null,null],[5,"graphene_vec4_get_z","","",null,null],[5,"graphene_vec4_init","","",null,null],[5,"graphene_vec4_init_from_float","","",null,null],[5,"graphene_vec4_init_from_vec2","","",null,null],[5,"graphene_vec4_init_from_vec3","","",null,null],[5,"graphene_vec4_init_from_vec4","","",null,null],[5,"graphene_vec4_length","","",null,null],[5,"graphene_vec4_max","","",null,null],[5,"graphene_vec4_min","","",null,null],[5,"graphene_vec4_multiply","","",null,null],[5,"graphene_vec4_near","","",null,null],[5,"graphene_vec4_negate","","",null,null],[5,"graphene_vec4_normalize","","",null,null],[5,"graphene_vec4_scale","","",null,null],[5,"graphene_vec4_subtract","","",null,null],[5,"graphene_vec4_to_float","","",null,null],[5,"graphene_vec4_one","","",null,null],[5,"graphene_vec4_w_axis","","",null,null],[5,"graphene_vec4_x_axis","","",null,null],[5,"graphene_vec4_y_axis","","",null,null],[5,"graphene_vec4_z_axis","","",null,null],[5,"graphene_vec4_zero","","",null,null],[6,"graphene_euler_order_t","","",null,null],[17,"GRAPHENE_EULER_ORDER_DEFAULT","","",null,null],[17,"GRAPHENE_EULER_ORDER_XYZ","","",null,null],[17,"GRAPHENE_EULER_ORDER_YZX","","",null,null],[17,"GRAPHENE_EULER_ORDER_ZXY","","",null,null],[17,"GRAPHENE_EULER_ORDER_XZY","","",null,null],[17,"GRAPHENE_EULER_ORDER_YXZ","","",null,null],[17,"GRAPHENE_EULER_ORDER_ZYX","","",null,null],[17,"GRAPHENE_HAS_GCC","","",null,null],[17,"GRAPHENE_HAS_SCALAR","","",null,null],[17,"GRAPHENE_HAS_SSE","","",null,null],[17,"GRAPHENE_PI","","",null,null],[17,"GRAPHENE_PI_2","","",null,null],[17,"GRAPHENE_SIMD_S","","",null,null],[17,"GRAPHENE_VEC2_LEN","","",null,null],[17,"GRAPHENE_VEC3_LEN","","",null,null],[17,"GRAPHENE_VEC4_LEN","","",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"clone","","",0,[[],["graphene_box_t",3]]],[11,"clone","","",1,[[],["graphene_euler_t",3]]],[11,"clone","","",2,[[],["graphene_frustum_t",3]]],[11,"clone","","",3,[[],["graphene_matrix_t",3]]],[11,"clone","","",4,[[],["graphene_plane_t",3]]],[11,"clone","","",5,[[],["graphene_point3d_t",3]]],[11,"clone","","",6,[[],["graphene_point_t",3]]],[11,"clone","","",7,[[],["graphene_quad_t",3]]],[11,"clone","","",8,[[],["graphene_quaternion_t",3]]],[11,"clone","","",9,[[],["graphene_ray_t",3]]],[11,"clone","","",10,[[],["graphene_rect_t",3]]],[11,"clone","","",11,[[],["graphene_simd4f_t",3]]],[11,"clone","","",12,[[],["graphene_simd4x4f_t",3]]],[11,"clone","","",13,[[],["graphene_size_t",3]]],[11,"clone","","",14,[[],["graphene_sphere_t",3]]],[11,"clone","","",15,[[],["graphene_triangle_t",3]]],[11,"clone","","",16,[[],["graphene_vec2_t",3]]],[11,"clone","","",17,[[],["graphene_vec3_t",3]]],[11,"clone","","",18,[[],["graphene_vec4_t",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]]],"p":[[3,"graphene_box_t"],[3,"graphene_euler_t"],[3,"graphene_frustum_t"],[3,"graphene_matrix_t"],[3,"graphene_plane_t"],[3,"graphene_point3d_t"],[3,"graphene_point_t"],[3,"graphene_quad_t"],[3,"graphene_quaternion_t"],[3,"graphene_ray_t"],[3,"graphene_rect_t"],[3,"graphene_simd4f_t"],[3,"graphene_simd4x4f_t"],[3,"graphene_size_t"],[3,"graphene_sphere_t"],[3,"graphene_triangle_t"],[3,"graphene_vec2_t"],[3,"graphene_vec3_t"],[3,"graphene_vec4_t"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);