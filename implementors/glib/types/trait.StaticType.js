(function() {var implementors = {};
implementors["graphene"] = [{"text":"impl StaticType for Box","synthetic":false,"types":[]},{"text":"impl StaticType for Euler","synthetic":false,"types":[]},{"text":"impl StaticType for Frustum","synthetic":false,"types":[]},{"text":"impl StaticType for Matrix","synthetic":false,"types":[]},{"text":"impl StaticType for Plane","synthetic":false,"types":[]},{"text":"impl StaticType for Point","synthetic":false,"types":[]},{"text":"impl StaticType for Point3D","synthetic":false,"types":[]},{"text":"impl StaticType for Quad","synthetic":false,"types":[]},{"text":"impl StaticType for Quaternion","synthetic":false,"types":[]},{"text":"impl StaticType for Ray","synthetic":false,"types":[]},{"text":"impl StaticType for Rect","synthetic":false,"types":[]},{"text":"impl StaticType for Size","synthetic":false,"types":[]},{"text":"impl StaticType for Sphere","synthetic":false,"types":[]},{"text":"impl StaticType for Triangle","synthetic":false,"types":[]},{"text":"impl StaticType for Vec2","synthetic":false,"types":[]},{"text":"impl StaticType for Vec3","synthetic":false,"types":[]},{"text":"impl StaticType for Vec4","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()